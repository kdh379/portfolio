{
    "skills": [
        {
            "id": 0,
            "title": "HTML",
            "keywords": [
                "시멘틱 요소",
                "웹 접근성"
            ],
            "details": [
                "적절한 시멘틱 요소를 사용하여 마크업합니다.",
                "웹 접근성을 고려하여 구현합니다."
            ]
        },
        {
            "id": 1,
            "title": "CSS",
            "keywords": [
                "레이아웃",
                "BEM",
                "반응형 웹"
            ],
            "details": [
                "레이아웃을 효율적으로 구성하기 위해 Flexbox와 Grid를 사용합니다.",
                "BEM 방법론을 사용하여 CSS 클래스를 작성합니다.",
                "다양한 화면 크기와 디바이스에 대응하기 위해 반응형 웹을 구현합니다."
            ]
        },
        {
            "id": 2,
            "title": "Styling",
            "keywords": [
                "Sass",
                "PostCSS",
                "Tailwind CSS"
            ],
            "details": [
                "Sass를 사용하여 스타일을 효율적으로 관리합니다.",
                "브라우저 호환성을 고려하여 PostCSS를 사용합니다.",
                "Tailwind CSS를 사용하여 빠르게 스타일을 작성합니다."
            ]
        },
        {
            "id": 3,
            "title": "JavaScript",
            "keywords": [
                "ES6+",
                "비동기 처리"
            ],
            "details": [
                "ES6 표준을 활용하여 코드를 작성합니다.",
                "비동기 처리를 위해 Promise와 async/await를 사용합니다."
            ]
        },
        {
            "id": 4,
            "title": "TypeScript",
            "keywords": [
                "타입 시스템",
                "인터페이스",
                "제네릭"
            ],
            "details": [
                "코드에 타입을 도입하여 런타임 오류를 방지하고 코드의 안정성을 높입니다.",
                "인터페이스를 사용하여 타입 확장과 재사용성을 강화합니다.",
                "제네릭과 타입 추론을 활용하여 코드의 재사용성을 높입니다."
            ]
        },
        {
            "id": 5,
            "title": "React",
            "keywords": [
                "함수형 컴포넌트",
                "Hooks",
                "Next.js",
                "Context API",
                "Recoil",
                "React-Query",
                "Concurrent UI",
                "framer-motion"
            ],
            "details": [
                "함수형 컴포넌트 기반으로 컴포넌트를 작성합니다.",
                "Hooks을 사용하여 재사용 가능한 로직을 구현합니다.",
                "Context API와 Recoil을 사용하여 컴포넌트 상태를 관리합니다.",
                "Concurrent UI 패턴을 사용하여 비동기 컴포넌트를 구현합니다.",
                "오픈소스 없이도 필요한 UI 컴포넌트를 직접 구현합니다."
            ]
        },
        {
            "id": 6,
            "title": "Node.js",
            "keywords": [
                "pnpm",
                "ESLint",
                "vite",
                "astro"
            ],
            "details": [
                "pnpm을 사용하여 효율적으로 패키지를 관리합니다.",
                "ESLint를 사용하여 코드 규칙을 정의합니다.",
                "vite, astro 기반의 프로젝트를 구성합니다."
            ]
        },
        {
            "id": 7,
            "title": "Knowledge",
            "keywords": [
                "Figma",
                "JAVA",
                "J2EE",
                "Spring Boot",
                "SQL",
                "Git",
                "Notion",
                "Markdown",
                "Linux",
                "Docker"
            ]
        }
    ]
}